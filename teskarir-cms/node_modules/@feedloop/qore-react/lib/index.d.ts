import React from "react";
import { QoreSchema, QoreClient, QoreOperationConfig, RowActions, QoreViewSchema, QoreOperationResult } from "@feedloop/qore-client";
import { AxiosRequestConfig } from "axios";
import { ConditionalPick } from "type-fest";
declare type QoreRequestStatus = "idle" | "loading" | "success" | "error";
declare type RelationActions = "addRelation" | "removeRelation";
export declare type RowActionsHooks<T extends QoreViewSchema["actions"]> = {
    [K in keyof T]: {
        trigger: (params: T[K]) => Promise<boolean>;
    };
};
declare type QoreHooks<T extends QoreSchema[string]> = {
    useListRow: (opts?: {
        limit?: number;
        offset?: number;
        order?: "asc" | "desc";
    } & T["params"], config?: Partial<QoreOperationConfig>) => {
        data: T["read"][];
        status: QoreRequestStatus;
        error: Error | null;
        revalidate: (config?: Partial<QoreOperationConfig>) => Promise<QoreOperationResult<AxiosRequestConfig, QoreOperationResult<AxiosRequestConfig, {
            nodes: T["read"][];
        }>>>;
    };
    useGetRow: (rowId: string, config?: Partial<QoreOperationConfig>) => {
        data: T["read"] | null;
        status: QoreRequestStatus;
        error: Error | null;
        revalidate: (config?: Partial<QoreOperationConfig>) => Promise<QoreOperationResult<AxiosRequestConfig, QoreOperationResult<AxiosRequestConfig, T["read"]>>>;
    };
    useInsertRow: () => {
        insertRow: (data: Partial<T["write"]>) => Promise<T["read"] | undefined>;
        status: QoreRequestStatus;
        error: Error | null;
    };
    useUpdateRow: () => {
        updateRow: (rowId: string, data: Partial<T["write"]>) => Promise<T["read"] | undefined>;
        status: QoreRequestStatus;
        error: Error | null;
    };
    useDeleteRow: () => {
        deleteRow: (rowId: string) => Promise<boolean | undefined>;
        status: QoreRequestStatus;
        error: Error | null;
    };
    useActions: (rowId: string) => {
        action: <A extends keyof RowActionsHooks<T["actions"]>>(actionId: A) => RowActionsHooks<T["actions"]>[A];
        rowActions: RowActionsHooks<T["actions"]>;
        statuses: Record<keyof RowActions<T["actions"]>, QoreRequestStatus>;
        errors: Record<keyof RowActions<T["actions"]>, Error | null>;
    };
    useRelation: (rowId: string) => {
        statuses: Record<RelationActions, QoreRequestStatus>;
        errors: Record<RelationActions, Error | null>;
    } & Record<RelationActions, (relations: Partial<ConditionalPick<T["write"], string[]>>) => Promise<boolean>>;
};
declare type QoreContextViews<ProjectSchema extends QoreSchema> = {
    [ViewName in keyof ProjectSchema]: QoreHooks<ProjectSchema[ViewName]>;
};
declare const createQoreContext: <ProjectSchema extends Record<string, QoreViewSchema>>(client: QoreClient<ProjectSchema>) => {
    views: QoreContextViews<ProjectSchema>;
    view: <K extends keyof ProjectSchema>(id: K) => QoreHooks<ProjectSchema[K]>;
    client: QoreClient<ProjectSchema>;
    context: React.Context<{
        client: QoreClient<ProjectSchema>;
    }>;
    useClient: () => QoreClient<ProjectSchema>;
};
export default createQoreContext;
