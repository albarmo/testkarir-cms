"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const createQoreContext = (client) => {
    const context = react_1.default.createContext({ client });
    function createViewHooks(currentViewId) {
        const rowActions = {};
        return {
            useListRow: (opts = {}, config = {}) => {
                const qoreClient = useClient();
                const [data, setData] = react_1.default.useState([]);
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const stream = react_1.default.useMemo(() => qoreClient.view(currentViewId).readRows(opts, config), [...Object.entries(opts).flat(), ...Object.entries(config).flat()]);
                react_1.default.useEffect(() => {
                    setStatus("loading");
                    const subscription = stream.subscribe(({ error, data }) => {
                        if (error) {
                            setError(error);
                            setStatus("error");
                        }
                        if (data) {
                            setError(null);
                            setData(data.nodes);
                            setStatus("success");
                        }
                    });
                    return () => {
                        subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
                    };
                }, [stream]);
                const revalidate = react_1.default.useCallback((config) => __awaiter(this, void 0, void 0, function* () {
                    const result = yield stream.revalidate(config).toPromise();
                    return result;
                }), [stream.revalidate]);
                return { data, error, status, revalidate };
            },
            useGetRow: (rowId, config = {}) => {
                const qoreClient = useClient();
                const [data, setData] = react_1.default.useState(null);
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const stream = react_1.default.useMemo(() => qoreClient.view(currentViewId).readRow(rowId, config), [rowId, ...Object.entries(config).flat()]);
                react_1.default.useEffect(() => {
                    setStatus("loading");
                    const subscription = stream.subscribe(({ data, error }) => {
                        if (error) {
                            setError(error);
                            setStatus("error");
                        }
                        if (data) {
                            setData(data);
                            setError(null);
                            setStatus("success");
                        }
                    });
                    return () => {
                        subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
                    };
                }, [stream]);
                const revalidate = react_1.default.useCallback((config) => __awaiter(this, void 0, void 0, function* () {
                    const result = yield stream.revalidate(config).toPromise();
                    return result;
                }), [stream.revalidate]);
                return { data, error, status, revalidate };
            },
            useInsertRow: () => {
                const qoreClient = useClient();
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const insertRow = (data) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        setStatus("loading");
                        const result = yield qoreClient.view(currentViewId).insertRow(data);
                        setError(null);
                        setStatus("success");
                        return result;
                    }
                    catch (error) {
                        setStatus("error");
                        setError(error);
                    }
                });
                return { insertRow, status, error };
            },
            useUpdateRow: () => {
                const qoreClient = useClient();
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const updateRow = (rowId, data) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        setStatus("loading");
                        const result = yield qoreClient
                            .view(currentViewId)
                            .updateRow(rowId, data);
                        setError(null);
                        setStatus("success");
                        return result;
                    }
                    catch (error) {
                        setStatus("error");
                        setError(error);
                    }
                });
                return { updateRow, status, error };
            },
            useDeleteRow: () => {
                const qoreClient = useClient();
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const deleteRow = (rowId) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        setStatus("loading");
                        const result = yield qoreClient
                            .view(currentViewId)
                            .deleteRow(rowId);
                        setError(null);
                        setStatus("success");
                        return result;
                    }
                    catch (error) {
                        setStatus("error");
                        setError(error);
                    }
                });
                return { deleteRow, status, error };
            },
            useActions: rowId => {
                const qoreClient = useClient();
                const qoreClientRowActions = qoreClient.view(currentViewId).actions;
                const [statuses, setStatuses] = react_1.default.useState(Object.keys(qoreClientRowActions).reduce((prev, curr) => (Object.assign(Object.assign({}, prev), { [curr]: "idle" })), {}));
                const [errors, setErrors] = react_1.default.useState(Object.keys(qoreClientRowActions).reduce((prev, curr) => (Object.assign(Object.assign({}, prev), { [curr]: null })), {}));
                const createAction = react_1.default.useCallback((actionId) => ({
                    trigger: (input) => __awaiter(this, void 0, void 0, function* () {
                        try {
                            setStatuses(Object.assign(Object.assign({}, statuses), { [actionId]: "loading" }));
                            const result = yield qoreClient
                                .view(currentViewId)
                                .action(actionId)
                                .trigger(rowId, input);
                            setStatuses(Object.assign(Object.assign({}, statuses), { [actionId]: "success" }));
                            setErrors(Object.assign(Object.assign({}, errors), { [actionId]: null }));
                            return result;
                        }
                        catch (newError) {
                            setStatuses(Object.assign(Object.assign({}, statuses), { [actionId]: "error" }));
                            setErrors(Object.assign(Object.assign({}, errors), { [actionId]: newError }));
                            return false;
                        }
                    })
                }), [rowId]);
                const action = react_1.default.useCallback((actionId) => {
                    if (!rowActions[actionId]) {
                        rowActions[actionId] = createAction(actionId);
                    }
                    return rowActions[actionId];
                }, [createAction]);
                react_1.default.useMemo(() => {
                    for (const actionId of Object.keys(qoreClient.view(currentViewId).actions)) {
                        rowActions[actionId] = createAction(actionId);
                    }
                }, [createAction]);
                return {
                    statuses,
                    errors,
                    rowActions,
                    action
                };
            },
            useRelation: rowId => {
                const qoreClient = useClient();
                const [statuses, setStatuses] = react_1.default.useState({ addRelation: "idle", removeRelation: "idle" });
                const [errors, setErrors] = react_1.default.useState({ removeRelation: null, addRelation: null });
                return {
                    statuses,
                    errors,
                    addRelation: (relations) => __awaiter(this, void 0, void 0, function* () {
                        setStatuses(statuses => (Object.assign(Object.assign({}, statuses), { addRelation: "loading" })));
                        try {
                            yield qoreClient
                                .view(currentViewId)
                                .addRelation(rowId, relations);
                            setStatuses(statuses => (Object.assign(Object.assign({}, statuses), { addRelation: "success" })));
                            setErrors(errors => (Object.assign(Object.assign({}, errors), { addRelation: null })));
                            return true;
                        }
                        catch (error) {
                            setStatuses(statuses => (Object.assign(Object.assign({}, statuses), { addRelation: "error" })));
                            setErrors(errors => (Object.assign(Object.assign({}, errors), { addRelation: error })));
                            return false;
                        }
                    }),
                    removeRelation: (relations) => __awaiter(this, void 0, void 0, function* () {
                        setStatuses(statuses => (Object.assign(Object.assign({}, statuses), { removeRelation: "loading" })));
                        try {
                            yield qoreClient
                                .view(currentViewId)
                                .removeRelation(rowId, relations);
                            setStatuses(statuses => (Object.assign(Object.assign({}, statuses), { removeRelation: "success" })));
                            setErrors(errors => (Object.assign(Object.assign({}, errors), { removeRelation: null })));
                            return true;
                        }
                        catch (error) {
                            setStatuses(statuses => (Object.assign(Object.assign({}, statuses), { removeRelation: "error" })));
                            setErrors(errors => (Object.assign(Object.assign({}, errors), { removeRelation: error })));
                            return false;
                        }
                    })
                };
            }
        };
    }
    const useClient = () => {
        const { client } = react_1.default.useContext(context);
        return client;
    };
    const views = new Proxy({}, {
        get: (views, currentViewId) => {
            if (!views[currentViewId]) {
                views[currentViewId] = createViewHooks(currentViewId);
            }
            return views[currentViewId];
        }
    });
    function view(id) {
        if (!views[id]) {
            views[id] = createViewHooks(id);
        }
        return views[id];
    }
    return {
        views,
        view,
        client,
        context,
        useClient
    };
};
exports.default = createQoreContext;
