import { AxiosRequestConfig } from "axios";
import { APIField } from "@feedloop/qore-sdk";
import { FormDrivers, QoreOperationConfig, QoreOperationResult, QoreViewSchema, RowActions } from "../types";
import QoreClient, { QoreProject, PromisifiedSource } from "./Qore";
import { ConditionalPick, ConditionalExcept } from "type-fest";
export declare class FormDriver<T extends QoreViewSchema["forms"][string]> {
    project: QoreProject;
    viewId: string;
    formId: string;
    constructor(project: QoreProject, viewId: string, formId: string);
    sendForm(params: T): Promise<{
        id: string;
    }>;
}
export declare class ViewDriver<T extends QoreViewSchema = QoreViewSchema> {
    id: string;
    tableId: string;
    fields: Record<string, APIField>;
    project: QoreProject;
    client: QoreClient;
    actions: RowActions<T["actions"]>;
    forms: FormDrivers<T["forms"]>;
    constructor(client: QoreClient, project: QoreProject, id: string, tableId: string, fields: APIField[]);
    action(actionId: keyof RowActions<T["actions"]>): RowActions<T["actions"]>[typeof actionId];
    createAction<FieldID = string>(fieldID: FieldID): RowActions<T["actions"]>[string];
    form<K extends keyof FormDrivers<T["forms"]>>(formId: K): FormDriver<T["forms"][K]>;
    readRows(opts?: Partial<{
        offset: number;
        limit: number;
        order: "asc" | "desc";
    }> & T["params"], config?: Partial<QoreOperationConfig>): PromisifiedSource<QoreOperationResult<AxiosRequestConfig, {
        nodes: T["read"][];
    }>>;
    readRow(id: string, config?: Partial<QoreOperationConfig>): PromisifiedSource<QoreOperationResult<AxiosRequestConfig, T["read"]>>;
    updateRow(id: string, input: Partial<ConditionalExcept<T["write"], string[]>>): Promise<T["read"]>;
    deleteRow(id: string): Promise<boolean>;
    insertRow(input: Partial<ConditionalExcept<T["write"], string[]>>): Promise<T["read"]>;
    addRelation(rowId: string, relations: Partial<ConditionalPick<T["write"], string[]>>): Promise<boolean>;
    removeRelation(rowId: string, relations: Partial<ConditionalPick<T["write"], string[]>>): Promise<boolean>;
    private generateFileUrl;
    upload(file: File): Promise<string>;
}
