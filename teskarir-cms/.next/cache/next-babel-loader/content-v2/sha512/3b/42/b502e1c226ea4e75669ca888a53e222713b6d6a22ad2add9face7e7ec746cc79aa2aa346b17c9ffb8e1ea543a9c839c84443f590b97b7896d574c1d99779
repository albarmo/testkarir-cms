{"ast":null,"code":"var _jsxFileName = \"/home/albarm/Desktop/Projects/Teskarir/testkarir-cms/teskarir-cms/components/TodoItem.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport qoreContext from \"../utils/qoreContext\";\nexport default function TodoItem(props) {\n  const editInputRef = React.useRef(null);\n  const [state, setState] = React.useState({\n    isEditing: false\n  });\n  const {\n    data: task,\n    status\n  } = qoreContext.views.toDoDefaultView.useGetRow(props.task.id);\n  const deleteTask = qoreContext.views.toDoDefaultView.useDeleteRow();\n  const updateTask = qoreContext.views.toDoDefaultView.useUpdateRow();\n  if (status === \"loading\" || !task) return __jsx(\"li\", {\n    key: props.task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    className: \"toggle\",\n    type: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }), __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, \"Loading\"), __jsx(\"button\", {\n    className: \"destroy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  })), __jsx(\"input\", {\n    className: \"edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }));\n  return __jsx(\"li\", {\n    key: task.id,\n    className: `${task.done ? \"completed\" : \"\"} ${state.isEditing && \"editing\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    disabled: updateTask.status === \"loading\",\n    onClick: () => {\n      updateTask.updateRow(task.id, {\n        done: !task.done\n      });\n    },\n    className: \"toggle\",\n    type: \"checkbox\",\n    checked: task.done,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    onClick: () => {\n      if (deleteTask.status == \"success\") return;\n      setState({\n        isEditing: true\n      });\n      setTimeout(() => {\n        var _editInputRef$current;\n\n        (_editInputRef$current = editInputRef.current) === null || _editInputRef$current === void 0 ? void 0 : _editInputRef$current.focus();\n      }, 100);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, deleteTask.status === \"loading\" ? \"[Removing]\" : deleteTask.status === \"success\" ? \"[Removed]\" : undefined, task.task), __jsx(\"button\", {\n    className: \"destroy\",\n    disabled: deleteTask.status !== \"idle\",\n    onClick: async () => {\n      await deleteTask.deleteRow(task.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })), __jsx(\"input\", {\n    ref: editInputRef,\n    className: \"edit\",\n    disabled: updateTask.status === \"loading\",\n    defaultValue: task.task,\n    onBlur: () => {\n      setState({\n        isEditing: false\n      });\n    },\n    onKeyPress: async e => {\n      if (e.key === \"Enter\") {\n        await updateTask.updateRow(task.id, {\n          task: e.currentTarget.value\n        });\n        setState({\n          isEditing: false\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/albarm/Desktop/Projects/Teskarir/testkarir-cms/teskarir-cms/components/TodoItem.tsx"],"names":["React","qoreContext","TodoItem","props","editInputRef","useRef","state","setState","useState","isEditing","data","task","status","views","toDoDefaultView","useGetRow","id","deleteTask","useDeleteRow","updateTask","useUpdateRow","done","updateRow","setTimeout","current","focus","undefined","deleteRow","e","key","currentTarget","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport qoreContext from \"../utils/qoreContext\";\nimport { QoreProjectSchema } from \"../qore-generated\";\n\nexport default function TodoItem(props: {\n  task: QoreProjectSchema[\"toDoDefaultView\"][\"read\"];\n}) {\n  const editInputRef = React.useRef<HTMLInputElement>(null);\n  const [state, setState] = React.useState({\n    isEditing: false,\n  });\n  const { data: task, status } = qoreContext.views.toDoDefaultView.useGetRow(\n    props.task.id\n  );\n  const deleteTask = qoreContext.views.toDoDefaultView.useDeleteRow();\n  const updateTask = qoreContext.views.toDoDefaultView.useUpdateRow();\n  if (status === \"loading\" || !task)\n    return (\n      <li key={props.task.id}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" />\n          <label>Loading</label>\n          <button className=\"destroy\"></button>\n        </div>\n        <input className=\"edit\" />\n      </li>\n    );\n  return (\n    <li\n      key={task.id}\n      className={`${task.done ? \"completed\" : \"\"} ${\n        state.isEditing && \"editing\"\n      }`}\n    >\n      <div className=\"view\">\n        <input\n          disabled={updateTask.status === \"loading\"}\n          onClick={() => {\n            updateTask.updateRow(task.id, { done: !task.done });\n          }}\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={task.done}\n        />\n        <label\n          onClick={() => {\n            if (deleteTask.status == \"success\") return;\n            setState({ isEditing: true });\n            setTimeout(() => {\n              editInputRef.current?.focus();\n            }, 100);\n          }}\n        >\n          {deleteTask.status === \"loading\"\n            ? \"[Removing]\"\n            : deleteTask.status === \"success\"\n            ? \"[Removed]\"\n            : undefined}\n          {task.task}\n        </label>\n        <button\n          className=\"destroy\"\n          disabled={deleteTask.status !== \"idle\"}\n          onClick={async () => {\n            await deleteTask.deleteRow(task.id);\n          }}\n        ></button>\n      </div>\n      <input\n        ref={editInputRef}\n        className=\"edit\"\n        disabled={updateTask.status === \"loading\"}\n        defaultValue={task.task}\n        onBlur={() => {\n          setState({ isEditing: false });\n        }}\n        onKeyPress={async (e) => {\n          if (e.key === \"Enter\") {\n            await updateTask.updateRow(task.id, {\n              task: e.currentTarget.value,\n            });\n            setState({ isEditing: false });\n          }\n        }}\n      />\n    </li>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}