{"ast":null,"code":"import _regeneratorRuntime from \"/home/albarm/Desktop/Projects/Teskarir/testkarir-cms/teskarir-cms/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/albarm/Desktop/Projects/Teskarir/testkarir-cms/teskarir-cms/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/albarm/Desktop/Projects/Teskarir/testkarir-cms/teskarir-cms/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/albarm/Desktop/Projects/Teskarir/testkarir-cms/teskarir-cms/components/TodoItem.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport qoreContext from \"../utils/qoreContext\";\nexport default function TodoItem(props) {\n  _s();\n\n  var editInputRef = React.useRef(null);\n\n  var _React$useState = React.useState({\n    isEditing: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var _qoreContext$views$to = qoreContext.views.toDoDefaultView.useGetRow(props.task.id),\n      task = _qoreContext$views$to.data,\n      status = _qoreContext$views$to.status;\n\n  var deleteTask = qoreContext.views.toDoDefaultView.useDeleteRow();\n  var updateTask = qoreContext.views.toDoDefaultView.useUpdateRow();\n  if (status === \"loading\" || !task) return __jsx(\"li\", {\n    key: props.task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    className: \"toggle\",\n    type: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }), __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, \"Loading\"), __jsx(\"button\", {\n    className: \"destroy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  })), __jsx(\"input\", {\n    className: \"edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }));\n  return __jsx(\"li\", {\n    key: task.id,\n    className: \"\".concat(task.done ? \"completed\" : \"\", \" \").concat(state.isEditing && \"editing\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    disabled: updateTask.status === \"loading\",\n    onClick: function onClick() {\n      updateTask.updateRow(task.id, {\n        done: !task.done\n      });\n    },\n    className: \"toggle\",\n    type: \"checkbox\",\n    checked: task.done,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    onClick: function onClick() {\n      if (deleteTask.status == \"success\") return;\n      setState({\n        isEditing: true\n      });\n      setTimeout(function () {\n        var _editInputRef$current;\n\n        (_editInputRef$current = editInputRef.current) === null || _editInputRef$current === void 0 ? void 0 : _editInputRef$current.focus();\n      }, 100);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, deleteTask.status === \"loading\" ? \"[Removing]\" : deleteTask.status === \"success\" ? \"[Removed]\" : undefined, task.task), __jsx(\"button\", {\n    className: \"destroy\",\n    disabled: deleteTask.status !== \"idle\",\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return deleteTask.deleteRow(task.id);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })), __jsx(\"input\", {\n    ref: editInputRef,\n    className: \"edit\",\n    disabled: updateTask.status === \"loading\",\n    defaultValue: task.task,\n    onBlur: function onBlur() {\n      setState({\n        isEditing: false\n      });\n    },\n    onKeyPress: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(e.key === \"Enter\")) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _context2.next = 3;\n                return updateTask.updateRow(task.id, {\n                  task: e.currentTarget.value\n                });\n\n              case 3:\n                setState({\n                  isEditing: false\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(TodoItem, \"d5veOdF5t+eSW1gFNWR6t4NsCgk=\", true);\n\n_c = TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["/home/albarm/Desktop/Projects/Teskarir/testkarir-cms/teskarir-cms/components/TodoItem.tsx"],"names":["React","qoreContext","TodoItem","props","editInputRef","useRef","useState","isEditing","state","setState","views","toDoDefaultView","useGetRow","task","id","data","status","deleteTask","useDeleteRow","updateTask","useUpdateRow","done","updateRow","setTimeout","current","focus","undefined","deleteRow","e","key","currentTarget","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport qoreContext from \"../utils/qoreContext\";\nimport { QoreProjectSchema } from \"./qore-generated.d.ts\";\n\nexport default function TodoItem(props: {\n  task: QoreProjectSchema[\"toDoDefaultView\"][\"read\"];\n}) {\n  const editInputRef = React.useRef<HTMLInputElement>(null);\n  const [state, setState] = React.useState({\n    isEditing: false,\n  });\n  const { data: task, status } = qoreContext.views.toDoDefaultView.useGetRow(\n    props.task.id\n  );\n  const deleteTask = qoreContext.views.toDoDefaultView.useDeleteRow();\n  const updateTask = qoreContext.views.toDoDefaultView.useUpdateRow();\n  if (status === \"loading\" || !task)\n    return (\n      <li key={props.task.id}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" />\n          <label>Loading</label>\n          <button className=\"destroy\"></button>\n        </div>\n        <input className=\"edit\" />\n      </li>\n    );\n  return (\n    <li\n      key={task.id}\n      className={`${task.done ? \"completed\" : \"\"} ${\n        state.isEditing && \"editing\"\n      }`}\n    >\n      <div className=\"view\">\n        <input\n          disabled={updateTask.status === \"loading\"}\n          onClick={() => {\n            updateTask.updateRow(task.id, { done: !task.done });\n          }}\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={task.done}\n        />\n        <label\n          onClick={() => {\n            if (deleteTask.status == \"success\") return;\n            setState({ isEditing: true });\n            setTimeout(() => {\n              editInputRef.current?.focus();\n            }, 100);\n          }}\n        >\n          {deleteTask.status === \"loading\"\n            ? \"[Removing]\"\n            : deleteTask.status === \"success\"\n            ? \"[Removed]\"\n            : undefined}\n          {task.task}\n        </label>\n        <button\n          className=\"destroy\"\n          disabled={deleteTask.status !== \"idle\"}\n          onClick={async () => {\n            await deleteTask.deleteRow(task.id);\n          }}\n        ></button>\n      </div>\n      <input\n        ref={editInputRef}\n        className=\"edit\"\n        disabled={updateTask.status === \"loading\"}\n        defaultValue={task.task}\n        onBlur={() => {\n          setState({ isEditing: false });\n        }}\n        onKeyPress={async (e) => {\n          if (e.key === \"Enter\") {\n            await updateTask.updateRow(task.id, {\n              task: e.currentTarget.value,\n            });\n            setState({ isEditing: false });\n          }\n        }}\n      />\n    </li>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}